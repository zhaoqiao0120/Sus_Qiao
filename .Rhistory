devtools::install_github("Nowosad/spDataLarge")
devtools::install_github("Nowosad/spDataLarge")
library(sf)          # classes and functions for vector data
library(raster)      # classes and functions for raster data
library(spData)        # load geographic data
library(dplyr)
library(stringr) # for working with strings (pattern matching)
library(spDataLarge)   # load larger geographic data
library(stplanr)      # geographic transport data package
library(tmap)
data(bristol_od) #travel data
names(bristol_od)
View(bristol_od)
zones_attr = bristol_od %>%
group_by(o) %>%
summarize_if(is.numeric, sum) %>% #the total number of people living in each zone
dplyr::rename(geo_code = o)
View(zones_attr)
zones_joined = left_join(bristol_zones, zones_attr, by = "geo_code")
View(zones_joined)
zones_od = bristol_od %>%
group_by(d) %>%
summarize_if(is.numeric, sum) %>%
dplyr::select(geo_code = d, all_dest = all) %>%
inner_join(zones_joined, ., by = "geo_code")
View(zones_od)
qtm(zones_od, c("all", "all_dest")) +
tm_layout(panel.labels = c("Origin", "Destination"))
data(bristol_zones)
names(bristol_zones)
data(bristol_od) #travel data
names(bristol_od)
zones_attr = bristol_od %>%
group_by(o) %>%
summarize_if(is.numeric, sum) %>% #the total number of people living in each zone
dplyr::rename(geo_code = o)
zones_joined = left_join(bristol_zones, zones_attr, by = "geo_code")
zones_od = bristol_od %>%
group_by(d) %>%
summarize_if(is.numeric, sum) %>%
dplyr::select(geo_code = d, all_dest = all) %>%
inner_join(zones_joined, ., by = "geo_code")
qtm(zones_od, c("all", "all_dest")) +
tm_layout(panel.labels = c("Origin", "Destination"))
qtm(zones_od, c("all", "all_dest")) +
tm_layout(panel.labels = c("Origin", "Destination"))
View(bristol_od)
od_top5 = bristol_od %>%
arrange(desc(all)) %>%
top_n(5, wt = all)
View(od_top5)
bristol_od$Active = (bristol_od$bicycle + bristol_od$foot) / bristol_od$all * 100
View(bristol_od)
od_intra = filter(bristol_od, o == d) #travel within the same zone
od_inter = filter(bristol_od, o != d) #between zones
desire_lines = od2line(od_inter, zones_od)
#> Creating centroids representing desire line start and end points.
qtm(desire_lines, lines.lwd = "all")
qtm(desire_lines, lines.lwd = "all")
View(desire_lines)
View(od_inter)
library(sf)
a <- 5
b <- 10
plot(a)
library(sf)          # classes and functions for vector data
library(raster)      # classes and functions for raster data
library(spData)        # load geographic data
library(dplyr)
library(stringr) # for working with strings (pattern matching)
library(spDataLarge)   # load larger geographic data
library(stplanr)      # geographic transport data package
library(tmap)
data(bristol_zones)
names(bristol_zones)
data(bristol_od) #travel data
names(bristol_od)
zones_attr = bristol_od %>%
group_by(o) %>%
summarize_if(is.numeric, sum) %>% #the total number of people living in each zone
dplyr::rename(geo_code = o)
zones_joined = left_join(bristol_zones, zones_attr, by = "geo_code")
zones_od = bristol_od %>%
group_by(d) %>%
summarize_if(is.numeric, sum) %>%
dplyr::select(geo_code = d, all_dest = all) %>%
inner_join(zones_joined, ., by = "geo_code")
qtm(zones_od, c("all", "all_dest")) +
tm_layout(panel.labels = c("Origin", "Destination"))
od_top5 = bristol_od %>%
arrange(desc(all)) %>%
top_n(5, wt = all)
bristol_od$Active = (bristol_od$bicycle + bristol_od$foot) / bristol_od$all * 100
od_intra = filter(bristol_od, o == d) #travel within the same zone
od_inter = filter(bristol_od, o != d) #between zones
desire_lines = od2line(od_inter, zones_od)
#> Creating centroids representing desire line start and end points.
qtm(desire_lines, lines.lwd = "all")
View(desire_lines)
desire_lines$distance = as.numeric(st_length(desire_lines))
desire_carshort = dplyr::filter(desire_lines, car_driver > 300 & distance < 5000)
View(desire_carshort)
View(desire_carshort)
View(desire_lines)
route_carshort = line2route(desire_carshort, route_fun = route_osrm)
View(route_carshort)
desire_carshort$geom_car = st_geometry(route_carshort)
route_carshort = line2route(desire_carshort, route_fun = route_osrm)
desire_rail = top_n(desire_lines, n = 3, wt = train)
View(desire_rail)
desire_rail = line_via(desire_rail, bristol_stations)
View(desire_rail)
ways_freeway = bristol_ways %>% filter(maxspeed == "70 mph")
View(ways_freeway)
ways_sln = SpatialLinesNetwork(ways_freeway)#represent route networks simultaneously as graphs and a set of geographic lines
View(ways_sln)
slotNames(ways_sln)
#> [1] "sl"          "g"           "nb"          "weightfield"
weightfield(ways_sln)
#> [1] "length"
class(ways_sln@g)
e = igraph::edge_betweenness(ways_sln@g)#the number of shortest paths passing through each edge
plot(ways_sln@sl$geometry, lwd = e / 500)
route_rail = desire_rail %>%
st_set_geometry("leg_orig") %>%
line2route(route_fun = route_osrm) %>%
st_set_crs(4326)
View(route_rail)
route_cycleway = rbind(route_rail, route_carshort)
route_cycleway$all = c(desire_rail$all, desire_carshort$all)
View(route_cycleway)
route_cycleway$all = c(desire_rail$all, desire_carshort$all)
qtm(route_cycleway, lines.lwd = "all")
